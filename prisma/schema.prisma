// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin > Moderator > Customer Support Agent > Premium User > User
enum Role {
  Admin
  Moderator
  CustomerSupportAgent
  PremiumUser
  User
}

enum Gender {
  Male
  Female
  Other
}

model User {
  id              String    @id @default(cuid())
  phone           String?   @unique
  phoneVerifiedAt DateTime?
  email           String?   @unique
  emailVerifiedAt DateTime?
  role            Role      @default(User)
  profile         Profile?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastVisitedAt DateTime @default(now())
}

model Profile {
  id                 String              @id @default(cuid())
  personal           Personal
  educationAndCareer EducationAndCareer?
  physicalAttributes PhysicalAttributes?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Personal {
  firstName     String
  lastName      String
  displayName   String
  image         String?
  gender        Gender        @default(Other)
  birthdate     DateTime
  location      Location?
  maritalStatus MaritalStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EducationAndCareer {
  educationLevel   EducationLevel
  fieldOfStudy     String
  employmentStatus EmploymentStatus
  jobTitle         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PhysicalAttributes {
  height    Int // Example: 167 (in cm)
  weight    Int // Example: 60 (in kg)
  skinColor SkinColor // Example: white

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MaritalStatus {
  Single
  Married
  Divorced
  Widowed
}

enum EducationLevel {
  NoEducation
  BelowDiploma
  Diploma
  Associate
  Bachelors
  Masters
  Doctorate
}

enum EmploymentStatus {
  Unemployed
  Employed
}

enum SkinColor {
  White
  Wheatish
  Olive
  Black
}

model Location {
  id          String       @id @default(cuid())
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id])
  city        City
  geolocation Geolocation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String  @unique
}

model Geolocation {
  id        String @id @default(cuid())
  latitude  String
  longitude String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  location   Location @relation(fields: [locationId], references: [id])
  locationId String   @unique
}

model Otp {
  id    String @id @default(cuid())
  phone String @unique
  code  String

  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Country {
  id        String     @id @default(cuid())
  name      String
  provinces Province[]
}

model Province {
  id        String  @id @default(cuid())
  name      String
  countryId String
  country   Country @relation(fields: [countryId], references: [id])
  cities    City[]
}

model City {
  id         String   @id @default(cuid())
  name       String
  provinceId String
  province   Province @relation(fields: [provinceId], references: [id])
}
