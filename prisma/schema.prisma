// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin > Moderator > Customer Support Agent > Premium User > User
enum Role {
  Admin
  Moderator
  CustomerSupportAgent
  PremiumUser
  User
}

enum Gender {
  Male
  Female
  Other
}

model User {
  id              String        @id @default(cuid())
  phone           String?       @unique
  phoneVerifiedAt DateTime?
  email           String?       @unique
  emailVerifiedAt DateTime?
  role            Role          @default(User)
  profile         Profile?
  lastVisitedAt   DateTime      @default(now())
  Message         Message[]
  ChatMembers     ChatMembers[]
  Chat            Chat[]
  Wallet          Wallet?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Profile {
  id                  String               @id @default(cuid())
  personal            Personal             @relation(fields: [personalId], references: [id])
  personalId          String               @unique
  educationAndCareer  EducationAndCareer?
  physicalAttributes  PhysicalAttributes?
  familyInfo          FamilyInfo?
  financialStatus     FinancialStatus?
  marriagePreferences MarriagePreferences?
  user                User                 @relation(fields: [userId], references: [id])
  userId              String               @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model FamilyInfo {
  id                 String         @id @default(cuid())
  fatherEducation    EducationLevel
  motherEducation    EducationLevel
  fatherEthnicity    Ethnicity
  motherEthnicity    Ethnicity
  siblingPosition    Int
  brothersCount      Int
  sistersCount       Int
  hasMarriedSiblings Boolean?
  profile            Profile        @relation(fields: [profileId], references: [id])
  profileId          String         @unique
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

enum Ethnicity {
  Persian // فارس
  Turkish // ترک
  Kurdish // کرد
  Baluchi // بلوچ
  Arab // عرب
  Lor // لر
  Gilaki // گیلک
  Mazandarani // مازندرانی
  Talysh // تالشی
  Armenian // ارمنی
  Ashuri // آشوری
  Turkmen // ترکمن
  Qashqai // قشقایی
  Afghani // افغان
  Azeri // آذری
  Sistani // سیستانی
  Other // سایر
}

model MarriagePreferences {
  id                        String            @id @default(cuid())
  ageMin                    Int
  ageMax                    Int
  maritalStatuses           MaritalStatus[]
  childrenStatus            ChildrenStatus? // Preference for partner's children status
  educationLevels           EducationLevel[]
  heightMin                 Int?
  heightMax                 Int?
  skinColors                SkinColor[]
  healthStatuses            HealthStatus[]
  incomeMin                 Int?
  incomeMax                 Int?
  housingStatuses           HousingStatus[]
  carStatuses               CarStatus[]
  preferredPersonalityTypes PersonalityType[]
  additionalNote            String?
  profile                   Profile           @relation(fields: [profileId], references: [id])
  profileId                 String            @unique
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
}

model Personal {
  id                String          @id @default(cuid())
  firstName         String
  lastName          String
  displayName       String
  bio               String
  image             String?
  gender            Gender          @default(Other)
  birthdate         DateTime
  maritalStatus     MaritalStatus
  healthStatus      HealthStatus
  healthDescription String?
  childrenStatus    ChildrenStatus  @default(None)
  greatestChildAge  Int?
  location          Location?
  personalityType   PersonalityType
  Profile           Profile?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

enum PersonalityType {
  Introvert
  Extrovert
  Ambivert
}

enum ChildrenStatus {
  None
  One
  Two
  Three
  Four
  FiveOrMore
}

enum HealthStatus {
  Healthy
  ChronicCondition
  Disability
}

model EducationAndCareer {
  id               String           @id @default(cuid())
  educationLevel   EducationLevel
  fieldOfStudy     String
  employmentStatus EmploymentStatus
  jobTitle         String?
  profile          Profile          @relation(fields: [profileId], references: [id])
  profileId        String           @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model PhysicalAttributes {
  id          String      @id @default(cuid())
  height      Int // in cm
  weight      Int // in kg
  skinColor   SkinColor
  beautyLevel BeautyLevel @default(Medium)
  styleLevel  StyleLevel  @default(Medium)
  profile     Profile     @relation(fields: [profileId], references: [id])
  profileId   String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum BeautyLevel {
  VeryLow
  Low
  Medium
  High
  VeryHigh
}

enum StyleLevel {
  VeryLow
  Low
  Medium
  High
  VeryHigh
}

model FinancialStatus {
  id             String        @id @default(cuid())
  personalIncome Int
  housingStatus  HousingStatus
  carStatus      CarStatus
  profile        Profile       @relation(fields: [profileId], references: [id])
  profileId      String        @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum HousingStatus {
  NoHouse
  RentedHouse
  OwnHouse
  WithFamily
}

enum CarStatus {
  NoCar
  HasCar
}

enum MaritalStatus {
  Single
  Married
  Divorced
  Widowed
}

enum EducationLevel {
  NoEducation
  BelowDiploma
  Diploma
  Associate
  Bachelors
  Masters
  Doctorate
}

enum EmploymentStatus {
  Unemployed
  Employed
}

enum SkinColor {
  White
  Wheatish
  Olive
  Black
}

model Location {
  id          String       @id @default(cuid())
  geolocation Geolocation?
  city        City         @relation(fields: [cityId], references: [id])
  cityId      String
  Personal    Personal     @relation(fields: [id], references: [id])
  personalId  String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Geolocation {
  id         String   @id @default(cuid())
  latitude   String
  longitude  String
  location   Location @relation(fields: [locationId], references: [id])
  locationId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Otp {
  id    String @id @default(cuid())
  phone String @unique
  code  String

  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Country {
  id        String     @id @default(cuid())
  name      String
  provinces Province[]
}

model Province {
  id        String  @id @default(cuid())
  name      String
  cities    City[]
  country   Country @relation(fields: [countryId], references: [id])
  countryId String
}

model City {
  id         String     @id @default(cuid())
  name       String
  Location   Location[]
  province   Province   @relation(fields: [provinceId], references: [id])
  provinceId String
}

model Chat {
  id          String        @id @default(cuid())
  type        ChatType      @default(Direct)
  members     User[]
  messages    Message[]
  ChatMembers ChatMembers[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum ChatType {
  Group
  Channel
  Direct
}

model ChatMembers {
  id       String @id @default(cuid())
  chat     Chat   @relation(fields: [chatId], references: [id])
  chatId   String
  member   User   @relation(fields: [memberId], references: [id])
  memberId String
}

model Message {
  id        String   @id @default(cuid())
  content   String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wallet {
  id           String        @id @default(cuid())
  balance      Float         @default(0.0)
  owner        User          @relation(fields: [ownerId], references: [id])
  ownerId      String        @unique
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Transaction {
  id        String          @id @default(cuid())
  amount    Float
  type      TransactionType
  wallet    Wallet          @relation(fields: [walletId], references: [id])
  walletId  String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

enum TransactionType {
  Deposit
  Withdrawal
}
